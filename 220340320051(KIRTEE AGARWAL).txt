-- SECTION 1
================

/*1. Create table DEPT with the following structure:-*/

create database DBT_EXAM;
SHOW databases;
USE DBT_EXAM;
CREATE TABLE DEPT(DEPTNO int,DNAME varchar(15),LOC varchar(10));
INSERT INTO DEPT (DEPTNO , DNAME , LOC) VALUES( '10' , 'ACCOUNTING', 'NEW YORK'),
('20', 'RESEARCH', 'DALLAS'),
('30', 'SALES', 'CHICAGO'),
('40', 'OPERATIONS', 'BOSTON');

SELECT * FROM DEPT;

/* 2) Create table EMP with the following structure:-*/

CREATE TABLE EMP(EMPNO int ,ENAME varchar(10),JOB varchar(9),HIREDATE date,SAL float,COMM float,DEPTNO int);
INSERT INTO EMP(EMPNO , ENAME ,JOB ,HIREDATE ,SAL ,COMM ,DEPTNO )VALUES (7839 , 'KING', 'MANAGER', '1991-11-17', 5000, NULL, 10),
(7698 ,'BLAKE', 'CLERK', '1981-05-01', 2850 ,NULL, 30),
(7782 ,'CLARK', 'MANAGER', '1981-06-09', 2450, NULL, 10),
(7566 ,'JONES', 'CLERK', '1981-04-02' ,2975, NULL, 20),
(7654 , 'MARTIN', 'SALESMAN' ,'1981-09-28' ,1250, 1400, 30),
(7499, 'ALLEN', 'SALESMAN', '1981-02-20', 1600 ,300, 30);
DROP TABLE EMP;

SELECT * FROM EMP;

/*3) Display all the employees where SAL between 2500 and 5000 (inclusive of both).*/

SELECT * FROM EMP WHERE SAL BETWEEN 2500 AND 5000;

/*4) Display all the ENAMEs in descending order of ENAME.*/

SELECT ENAME FROM EMP ORDER BY ENAME DESC;

/*5) Display all the JOBs in lowercase.*/

SELECT LOWER (JOB) FROM EMP ORDER BY ENAME;

/*6) Display the ENAMEs and the lengths of the ENAMEs.*/

SELECT ENAME , CHAR_LENGTH(ENAME) FROM EMP;

/*7)Display the DEPTNO and the count of employees who belong to that DEPTNO .*/

SELECT DEPTNO,COUNT(*) FROM EMP GROUP BY DEPTNO;

/*8)Display the DNAMEs and the ENAMEs who belong to that DNAME.*/

SELECT DNAME , ENAME FROM DEPT D JOIN EMP E ON E.DEPTNO = D.DEPTNO; 
 
 /*9)Display the position at which the string ‘AR’ occurs in the ename.*/

 SELECT ENAME , POSITION('AR' IN ENAME) AS FIRST_OCC_AR FROM EMP;
 
 /*10)Display the HRA for each employee given that HRA is 20% of SAL.*/

 SELECT ENAME , SAL , SAL*0.2 AS HRA FROM EMP;
 

 -- SECTION 2
===================
 
 /*1. Write a stored procedure by the name of PROC1 that accepts two varchar strings
as parameters. Your procedure should then determine if the first varchar string
exists inside the varchar string. For example, if string1 = ‘DAC’ and string2 =
‘CDAC, then string1 exists inside string2. The stored procedure should insert the
appropriate message into a suitable TEMPP output table. Calling program for the
stored procedure need not be written.*/

drop table tempp;
create table tempp(
string_1 varchar(15),
string_2 varchar(15),
result varchar(15)
);


delimiter //
create procedure proc1(str1 varchar(15) , str2 varchar(15))
begin
   declare x int;
   set x = INSTR(str2 , str1);
   if x > 0 then
     insert into tempp(string_1 , string_2 ,result) values
     (str1 , str2, 'present');
   else
     insert into tempp(string_1 , string_2 , result) values
     (str1, str2 , 'not present');
   end if;
  end; //
  delimiter ;
  select * from tempp;



/*2. Create a stored function by the name of FUNC1 to take three parameters, the
sides of a triangle. The function should return a Boolean value:- TRUE if the
triangle is valid, FALSE otherwise. A triangle is valid if the length of each side is
less than the sum of the lengths of the other two sides. Check if the dimensions
entered can form a valid triangle. Calling program for the stored function need not
be written.*/

use DBT_EXAM;
DELIMITER // 
create function func1( a int , b int , c int)
returns boolean 
deterministic
begin
if((c<a+b) and (a<b+c) and (b<a+c)) then
return true;
else
return false;
end if;
end ; //
delimiter ;

delimiter //
create procedure ghf()
begin
declare x boolean;
set x = func1(10 , 15 , 20);
insert into tri values(x);
end; //
delimiter ;
create table tri(b boolean);

call ghf();
 drop procedure ghf;
 select * from tri;


 
 



